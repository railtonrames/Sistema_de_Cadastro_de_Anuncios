//Formulário de Relatórios
package VIEW;

import DAO.AnuncioDAO;
import DTO.AnuncioDTO;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

public class FrmRelatorio extends javax.swing.JFrame {

    //Inicializa componentes e chama o método de formatar campos.
    public FrmRelatorio() {
        initComponents();
        formatarCampo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbRelatorio = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lbCliente = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        lb_Tempo = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbE = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        txtData1 = new javax.swing.JFormattedTextField();
        txtData2 = new javax.swing.JFormattedTextField();
        btnVoltar = new javax.swing.JButton();
        btnTodos = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Anúncio", "Cliente", "Início", "Término", "Invest. p/ Dia", "Invest. Total", "Qtd. Max. Visualizações", "Qtd. Max. Cliques", "Qtd. Max. Compartilhamentos"
            }
        ));
        jScrollPane1.setViewportView(tbRelatorio);
        if (tbRelatorio.getColumnModel().getColumnCount() > 0) {
            tbRelatorio.getColumnModel().getColumn(0).setPreferredWidth(10);
            tbRelatorio.getColumnModel().getColumn(6).setResizable(false);
            tbRelatorio.getColumnModel().getColumn(8).setResizable(false);
            tbRelatorio.getColumnModel().getColumn(9).setResizable(false);
        }

        lbCliente.setText("Cliente:");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        lb_Tempo.setText("Intervalo de Tempo entre:");

        lbE.setText("e");

        lbTitulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbTitulo.setText("Relatórios");

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnTodos.setText("Ver todos os registros");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar Campos");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbTitulo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNome)
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lb_Tempo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbE)
                                .addGap(18, 18, 18)
                                .addComponent(txtData2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnTodos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbTitulo)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCliente)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_Tempo)
                            .addComponent(lbE)
                            .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVoltar)
                    .addComponent(btnTodos)
                    .addComponent(btnLimpar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //Método que formata os campos de datas.
    private void formatarCampo() {
        try {
            //Cria o objeto e passa a máscara.
            MaskFormatter mascaraDt1 = new MaskFormatter("##/##/####");
            //Preenche os espaços vazios com o '_' enquanto os dados não forem inseridos. 
            mascaraDt1.setPlaceholderCharacter('_');
            //Instala a máscara no campo txtData1.
            mascaraDt1.install(txtData1);
            //Cria o objeto e passa a máscara.
            MaskFormatter mascaraDt2 = new MaskFormatter("##/##/####");
            //Preenche os espaços vazios com o '_' enquanto os dados não forem inseridos. 
            mascaraDt2.setPlaceholderCharacter('_');
            //Instala a máscara no campo txtData2.
            mascaraDt2.install(txtData2);

        } catch (ParseException erro) {
            //Exibe uma janela com o erro gerado.
            JOptionPane.showMessageDialog(null, "Erro ao formatar campo de texto, " + erro, "Erro", JOptionPane.ERROR);
        }
    }
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        //Chama o método listaValores caso o botão 'btnBuscar' tenha sido acionado.
        listarValores();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        //Abre o formulário de menu e fecha o formulário atual caso o botão 'btnVoltar' tenha sido acionado.
        new FrmMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        //Chama o método listaTodos caso o botão 'btnTodos' tenha sido acionado.
        listarTodos();
    }//GEN-LAST:event_btnTodosActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        //Chama o método limpaCampos caso o botão 'btnLimpar' tenha sido acionado.
        limpaCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnTodos;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbE;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lb_Tempo;
    private javax.swing.JTable tbRelatorio;
    private javax.swing.JFormattedTextField txtData1;
    private javax.swing.JFormattedTextField txtData2;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

//Método que passa os valores digitados e retorna os dados para a tabela.
    private void listarValores() {
        try {
            //Instância classe.
            AnuncioDAO objanunciodao = new AnuncioDAO();
            //Cria um modelo de tabela e monta na tabela.
            DefaultTableModel model = (DefaultTableModel) tbRelatorio.getModel();
            //Inicializa o modelo com 0 linhas.
            model.setNumRows(0);
            //Cria as variáveis.
            String diaInicio, mesInicio, anoInicio, dt_ini, dt_fim, diaFim, mesFim, anoFim;
            //Formata as entradas de data para o padrão usado no sql caso a entrada não esteja vazia.
            if (!"__/__/____".equals(txtData1.getText())) {
                diaInicio = txtData1.getText().substring(0, 2);
                mesInicio = txtData1.getText().substring(3, 5);
                anoInicio = txtData1.getText().substring(6);
                dt_ini = anoInicio + "-" + mesInicio + "-" + diaInicio;
                diaFim = txtData2.getText().substring(0, 2);
                mesFim = txtData2.getText().substring(3, 5);
                anoFim = txtData2.getText().substring(6);
                dt_fim = anoFim + "-" + mesFim + "-" + diaFim;
            } else {
                dt_ini = "";
                dt_fim = "";
            }

            //Passa as entradas informadas e chama a função do DAO para retornar o relatório.
            ArrayList<AnuncioDTO> lista = objanunciodao.retornaRelatorio(txtNome.getText(), dt_ini, dt_fim);
            //Loop que adiciona a lista na tabela.
            for (int i = 0; i < lista.size(); i++) {
                model.addRow(new Object[]{
                    lista.get(i).getID_ANUNC(),
                    lista.get(i).getNO_ANUNC(),
                    lista.get(i).getNO_CLIENTE(),
                    lista.get(i).getDT_INIC(),
                    lista.get(i).getDT_TERM(),
                    lista.get(i).getVL_INVST_DIA(),
                    lista.get(i).getVL_TOTAL(),
                    lista.get(i).calculaValorInvestido(),
                    lista.get(i).getMAX_CLI(),
                    lista.get(i).getMAX_COM(),});
            }

        } catch (Exception erro) {
            //Exibe uma janela com o erro gerado.
            JOptionPane.showMessageDialog(null, "FrmSelectVIEW|Listar Valores: " + erro);
        }
    }

    //Retorna todos os dados e lista eles na tabela.
    private void listarTodos() {
        try {
            //Instância classe.
            AnuncioDAO objanunciodao = new AnuncioDAO();
            //Cria um modelo de tabela e monta na tabela.
            DefaultTableModel model = (DefaultTableModel) tbRelatorio.getModel();
            //Inicializa o modelo com 0 linhas.
            model.setNumRows(0);
            //Chama a função do DAO e adiciona ao objeto lista.
            ArrayList<AnuncioDTO> lista = objanunciodao.retornaTodos();
            //Loop que adiciona a lista na tabela.
            for (int i = 0; i < lista.size(); i++) {
                model.addRow(new Object[]{
                    lista.get(i).getID_ANUNC(),
                    lista.get(i).getNO_ANUNC(),
                    lista.get(i).getNO_CLIENTE(),
                    lista.get(i).getDT_INIC(),
                    lista.get(i).getDT_TERM(),
                    lista.get(i).getVL_INVST_DIA(),
                    lista.get(i).getVL_TOTAL(),
                    lista.get(i).calculaValorInvestido(),
                    lista.get(i).getMAX_CLI(),
                    lista.get(i).getMAX_COM()
                });
            }

        } catch (Exception erro) {
            //Exibe uma janela com o erro gerado.
            JOptionPane.showMessageDialog(null, "FrmSelectVIEW|Listar Valores: " + erro);
        }
    }

    //Limpa os campos.
    private void limpaCampos() {
        txtData1.setText("");
        txtData2.setText("");
        txtNome.setText("");
    }
}
